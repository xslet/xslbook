<?xml version="1.0" encoding="utf-8"?>

<project name="xslbook" basedir="." default="build">

 <!-- These properties are used by merge processes -->
 <property name="product"   value="xslbook.xsl" />
 <property name="version"   value="0.1" />
 <property name="copyright" value="Copyright (C) 2020-2021 xslet@github" />
 <property name="license"   value="MIT License" />


 <!-- The versions of dependency modules -->
 <property name="dep.xslutil.version" value="0.1.1" />
 <property name="dep.xsldo.version"   value="0.3.0" />
 <property name="dep.xsldoc.version"  value="0.1.1" />
 <property name="dep.saxon.version"   value="10-6J" />
 <property name="dep.tomcat.version"  value="10.0.14" />


 <!-- The package names of dependency modules -->
 <property name="pkg.xslutil" value="xslutil-${dep.xslutil.version}" />
 <property name="pkg.xsldo"   value="xsldo-${dep.xsldo.version}" />
 <property name="pkg.xsldoc"  value="xsldoc-${dep.xsldoc.version}" />
 <property name="pkg.saxon"   value="SaxonHE${dep.saxon.version}" />
 <property name="pkg.tomcat"  value="apache-tomcat-${dep.tomcat.version}" />


 <!-- The directory paths in this project -->
 <property name="dir.res"    location="${basedir}/res" />
 <property name="dir.src"    location="${basedir}/src" />
 <property name="dir.dist"   location="${basedir}/dist" />
 <property name="dir.test"   location="${basedir}/test" />
 <property name="dir.docs"   location="${basedir}/docs" />
 <property name="dir.work"   location="${basedir}/work" />

 <property name="dir.src.xsl"  location="${dir.src}/xsl" />
 <property name="dir.src.scss" location="${dir.src}/scss" />
 <property name="dir.src.js"   location="${dir.src}/js" />

 <property name="dir.res.xsl" location="${dir.res}/xsl" />
 <property name="dir.res.doc" location="${dir.res}/doc" />
 <property name="dir.res.js"  location="${dir.res}/js" />

 <property name="dir.work.dl"  location="${dir.work}/downloads" />
 <property name="dir.work.lib" location="${dir.work}/lib" />
 <property name="dir.work.bin" location="${dir.work}/bin" />

 <property name="dir.xslutil"  location="${dir.work.lib}/${pkg.xslutil}" />
 <property name="dir.xsldo"    location="${dir.work.lib}/${pkg.xsldo}" />
 <property name="dir.xsldoc"   location="${dir.work.lib}/${pkg.xsldoc}" />
 <property name="dir.saxon"    location="${dir.work.lib}/${pkg.saxon}" />
 <property name="dir.tomcat"   location="${dir.work.bin}/${pkg.tomcat}" />

 <property name="dir.deploy"   location="${dir.tomcat}/webapps/${ant.project.name}" />


 <target name="setup">
  <antcall target="setup:dirs" />
  <antcall target="setup:scss" />
  <antcall target="setup:js" />
  <antcall target="setup:get-deps" />
 </target>


 <target name="setup:scss">
  <touch file="${dir.src.scss}/xslbook.scss" />
 </target>

 <target name="setup:js">
  <copy todir="${dir.src.js}">
   <fileset dir="${dir.res.js}" />
  </copy>
  <antcall target="setup:npm-install" />
 </target>

 <target name="setup:npm-install">
  <property name="prefix" value="${dir.src.js}" />
  <exec executable="${npm.cmd}">
   <arg line="${npm.arg}" />
   <arg line="install" />
   <arg line="--prefix ${prefix}" />
  </exec>
 </target>


 <target name="setup:dirs">
  <mkdir dir="${dir.src.xsl}" />
  <mkdir dir="${dir.src.xsl}/lib" />
  <mkdir dir="${dir.src.xsl}/ext" />
  <mkdir dir="${dir.src.scss}" />
  <mkdir dir="${dir.src.js}" />
  <mkdir dir="${dir.dist}" />
  <mkdir dir="${dir.test}/unit" />
  <mkdir dir="${dir.docs}/test" />
  <mkdir dir="${dir.docs}/api" />
  <mkdir dir="${dir.work.dl}" />
  <mkdir dir="${dir.work.lib}" />
  <mkdir dir="${dir.work.bin}" />
  <mkdir dir="${dir.deploy}" />
 </target>


 <target name="setup:get-deps">
  <antcall target="setup:get-xslutil" />
  <antcall target="setup:get-xsldo" />
  <antcall target="setup:get-xsldoc" />
  <antcall target="setup:get-saxon" />
  <antcall target="setup:get-tomcat" />
 </target>


 <target name="setup:get-xslutil">
  <property name="url" value="https://github.com/xslet/xslutil/archive/${dep.xslutil.version}.zip" />
  <property name="zip" location="${dir.work.dl}/${pkg.xslutil}.zip" />
  <property name="unzip" location="${dir.xslutil}/.." />
  <get src="${url}" dest="${zip}" />
  <unzip src="${zip}" dest="${unzip}" />
 </target>


 <target name="setup:get-xsldo">
  <property name="url" value="https://github.com/xslet/xsldo/archive/${dep.xsldo.version}.zip" />
  <property name="zip" location="${dir.work.dl}/${pkg.xsldo}.zip" />
  <property name="unzip" location="${dir.xsldo}/.." />
  <get src="${url}" dest="${zip}" />
  <unzip src="${zip}" dest="${unzip}" />
 </target>


 <target name="setup:get-xsldoc">
  <property name="url" value="https://github.com/xslet/xsldoc/archive/${dep.xsldoc.version}.zip" />
  <property name="zip" location="${dir.work.dl}/${pkg.xsldoc}.zip" />
  <property name="unzip" location="${dir.xsldoc}/.." />
  <get src="${url}" dest="${zip}" />
  <unzip src="${zip}" dest="${unzip}" />
 </target>


 <target name="setup:get-saxon">
  <property name="url" value="https://sourceforge.net/projects/saxon/files/Saxon-HE/10/Java/${pkg.saxon}.zip/download" />
  <property name="zip" location="${dir.work.dl}/${pkg.saxon}.zip" />
  <property name="unzip" location="${dir.saxon}" />
  <get src="${url}" dest="${zip}" />
  <unzip src="${zip}" dest="${unzip}" />
 </target>


 <target name="setup:get-tomcat">
  <property name="url" value="https://archive.apache.org/dist/tomcat/tomcat-10/v${dep.tomcat.version}/bin/${pkg.tomcat}.zip" />
  <property name="zip" location="${dir.work.dl}/${pkg.tomcat}.zip" />
  <property name="unzip" location="${dir.work.bin}" />
  <get src="${url}" dest="${zip}" />
  <unzip src="${zip}" dest="${unzip}" />
  <chmod perm="ugo+rx" dir="${dir.tomcat}/bin" includes="**/*.sh" />
 </target>


 <target name="build">
  <antcall target="clean" />
  <antcall target="merge" />
  <antcall target="build:scss" />
  <antcall target="build:js" />
  <antcall target="deploy" />
 </target>


 <target name="clean">
  <delete>
   <fileset dir="${dir.dist}"      includes="**/*" />
   <fileset dir="${dir.deploy}"    includes="**/*" />
   <fileset dir="${dir.docs}/test" includes="**/*" />
   <fileset dir="${dir.docs}/api"  includes="**/*" />
  </delete>
  <exec executable="find" os="Mac OS X">
   <arg line=". -name .DS_Store -delete" />
  </exec>
 </target>


 <target name="merge">
  <delete>
   <fileset dir="${dir.src.xsl}/ext" includes="**/*" />
  </delete>
  <antcall target="merge:xsl-for-doc" />
  <copy todir="${dir.src.xsl}/ext">
   <fileset dir="${dir.xslutil}/dist" />
   <fileset dir="${dir.xsldo}/dist" />
  </copy>
  <antcall target="merge:xsl-for-dist" />
  <antcall target="merge:xsl-for-test" />
 </target>

 <target name="merge:xsl-for-doc">
  <path id="extjars">
   <fileset dir="${dir.work.lib}">
    <include name="**/*.jar" />
   </fileset>
  </path>
  <java classname="net.sf.saxon.Transform">
   <arg line="-o:${dir.docs}" />
   <arg line="-s:${dir.src.xsl}" />
   <arg line="-xsl:${dir.res.xsl}/merge-for-doc.xsl" />
   <arg line="-strip:all" />
   <classpath refid="extjars" />
  </java>
 </target>

 <target name="merge:xsl-for-dist">
  <path id="extjars">
   <fileset dir="${dir.work.lib}">
    <include name="**/*.jar" />
   </fileset>
  </path>
  <java classname="net.sf.saxon.Transform">
   <arg line="-o:${dir.dist}" />
   <arg line="-s:${dir.src.xsl}" />
   <arg line="-xsl:${dir.res.xsl}/merge-for-dist.xsl" />
   <arg line="-strip:all" />
   <classpath refid="extjars" />
  </java>
 </target>

 <target name="merge:xsl-for-test">
  <path id="extjars">
   <fileset dir="${dir.work.lib}">
    <include name="**/*.jar" />
   </fileset>
  </path>
  <java classname="net.sf.saxon.Transform">
   <arg line="-o:${dir.test}/unit" />
   <arg line="-s:${dir.src.xsl}" />
   <arg line="-xsl:${dir.res.xsl}/merge-for-test.xsl" />
   <arg line="-strip:all" />
   <classpath refid="extjars" />
  </java>
 </target>


 <condition property="npm.cmd" value="cmd" else="npm">
  <os family="windows" />
 </condition>

 <condition property="npm.arg" value="/c npm" else="">
  <os family="windows" />
 </condition>


 <target name="build:scss">
  <property name="prefix" value="${dir.src.js}" />
  <exec executable="${npm.cmd}">
   <arg line="${npm.arg}" />
   <arg line="run sass:build" />
   <arg line="--prefix ${prefix}" />
  </exec>
 </target>


 <target name="build:js">
  <property name="prefix" value="${dir.src.js}" />
  <exec executable="${npm.cmd}">
   <arg line="${npm.arg}" />
   <arg line="run js:build" />
   <arg line="--prefix ${prefix}" />
  </exec>
 </target>


 <target name="deploy">
  <copy todir="${dir.test}">
   <fileset dir="${dir.dist}" />
  </copy>
  <copy todir="${dir.docs}/api/xsldoc">
   <fileset dir="${dir.xsldoc}/dist" />
  </copy>
  <copy todir="${dir.docs}/test">
   <fileset dir="${dir.test}" />
  </copy>
  <copy todir="${dir.docs}/test/unit">
   <fileset dir="${dir.res.doc}" />
  </copy>
  <copy todir="${dir.deploy}">
   <fileset dir="${dir.docs}" />
  </copy>
 </target>


 <target name="watch">
  <retry retrycount="1000000">
   <antcall target="watch:wait-and-build" />
  </retry>
 </target>

 <target name="watch:wait-and-build">
  <waitfor>
   <not>
    <uptodate targetfile="${dir.dist}/${product}">
     <srcfiles dir="${dir.src}" includes="**/*" />
     <srcfiles dir="${dir.test}" includes="**/*" />
    </uptodate>
   </not>
  </waitfor>
  <antcall target="build" />
  <touch file="${dir.dist}/${product}" />
  <fail />
 </target>


 <target name="start">
  <condition property="cmd" value="startup.bat" else="startup.sh">
   <os family="windows" />
  </condition>
  <exec executable="${dir.tomcat}/bin/${cmd}" />
 </target>


 <target name="stop">
  <condition property="cmd" value="shutdown.bat" else="shutdown.sh">
   <os family="windows" />
  </condition>
  <exec executable="${dir.tomcat}/bin/${cmd}" />
 </target>


 <target name="help">
  <echo><![CDATA[
ant <target>

TARGET)
  setup    : Make directories and download modules used for build.
  build    : Execute `clean`, `merge` and `deploy` tasks.
  clean    : Clean files in `dist` directory.
  merge    : Merge XSL files into a distributable file.
  deploy   : Deploy distributable files and test files to Tomcat.
  watch    : Watch source files updated, then deploy.
  start    : Start tomcat.
  stop     : Stop tomcat.
]]></echo>
 </target>


</project>
